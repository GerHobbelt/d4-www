---
title: Getting Started
h1: 'd4'
lead: A friendly charting DSL for d3
---
<div class="row">
    <div class="col-md-12">
                    <h3>Getting Started</h3>
                    <p>Follow a few simple steps to get d4 up and running with your data.</p>

                    <h4>Installation</h4>
                    <p>Either download d4 directly from the repository
                      or install it using a package manager like bower.</p>
                    <pre><code class="language-bash">
$ bower install d4
                    </code></pre>
                    <p>Once you have a local copy of d4 simply include it after d3
                      in your source file.</p>
                      <pre><code>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;!-- sensible defaults for styles -->
  &lt;link href="d4.css" rel="stylesheet" />
&lt;/head&gt;
&lt;body&gt;
  ...
&lt;script src="d3.js">&lt;/script>
&lt;script src="d4.js">&lt;/script>
&lt;/body>
&lt;/html>
                       </code></pre>

                    <h4 class="prependTop">Hello World</h4>
                    <p>Here is the most basic example, which uses all the preset defaults provided by d4.</p>
                      <pre><code class="language-javascript">
var data = [
  { x : '2010', y : 5 },
  { x : '2011', y : 15 },
  { x : '2012', y : 20 }
];
var columnChart = d4.charts.column();

d3.select('test')
  .datum(data)
  .call(columnChart);</code>
                      </pre>

                      <h4 class="prependTop">Overriding the defaults</h4>
                      <p>Of course, it is very rare for charts to be fit for purpose right out of the box.
                        Therefore d4 strives to make configuration as natural as possible. d4 uses
                        a declarative chaining style, which should feel very familiar to even developers
                        new to D3.<p>
                      <pre><code class="language-javascript">
var data = [
  { x : '2010', y : 5 },
  { x : '2011', y : 15 },
  { x : '2012', y : 20 }
];
var columnChart = d4.charts.column()
.margin({
  top: 15,
  right: 10,
  bottom: 30,
  left: 0
});

d3.select('test')
  .datum(data)
  .call(columnChart);
                      </code></pre>
                      <h4 class="prependTop">Mix it up</h4>
                      <p>In d4 charts are composed of features, which are visual components of a chart.
                        Features in d4 help convey meaning in the data, and can easily be mixed in or out of a chart.<p>
                      <pre><code class="language-javascript">
var data = [
  { x : '2010', y : 5 },
  { x : '2011', y : 15 },
  { x : '2012', y : 20 }
];

// Create a column chart without a yAxis, but with a grid in the background.
// Note that `index` is optional and is only needed if you want to specify a
// specific layer for the feature to render on.
var columnChart = d4.charts.column()
.mixout('yAxis')
.mixin({ name : 'grid',  feature : d4.features.grid , index : 0 })

d3.select('test')
  .datum(data)
  .call(columnChart);
                    </code></pre>

                    <h4 class="prependTop">Using features</h4>
                    <p>d4 allows developers to control individual features of the chart in a clear declarative style.<p>
                    <pre><code class="language-javascript">
var data = [
  { x : '2010', y : 5 },
  { x : '2011', y : 15 },
  { x : '2012', y : 20 }
];

// Add styles based on the sign of a value.
var columnChart = d4.charts.column()
.using('bars', function(bars){
  bars
  .classes(function(d, i){
    return d[1] < 0 ? 'negative' + i : 'positive' + i;
  });
});

d3.select('test')
  .datum(data)
  .call(columnChart);
                    </code></pre>
    </div>
</div>
<div class="row prependTop">
  <div class="col-md-12">
    {{> disqus }}
  </div>
</div>
